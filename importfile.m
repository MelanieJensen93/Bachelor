function tableout = importfile(workbookFile,sheetName,startRow,endRow)
%IMPORTFILE Import data from a spreadsheet
%   DATA = IMPORTFILE(FILE) reads data from the first worksheet in the
%   Microsoft Excel spreadsheet file named FILE and returns the data as a
%   table.
%
%   DATA = IMPORTFILE(FILE,SHEET) reads from the specified worksheet.
%
%   DATA = IMPORTFILE(FILE,SHEET,STARTROW,ENDROW) reads from the specified
%   worksheet for the specified row interval(s). Specify STARTROW and
%   ENDROW as a pair of scalars or vectors of matching size for
%   dis-contiguous row intervals. To read to the end of the file specify an
%   ENDROW of inf.%
% Example:
%   SensorDataFil = importfile('SensorDataFil.xlsx','Ark1',2,12);
%
%   See also XLSREAD.

% Auto-generated by MATLAB on 2018/10/16 10:41:38

%% Input handling

% If no sheet is specified, read first sheet
if nargin == 1 || isempty(sheetName)
    sheetName = 1;
end

% If row start and end points are not specified, define defaults
if nargin <= 3
    startRow = 2;
    endRow = 16;
end
d=1; 
%% Import the data, extracting spreadsheet dates in Excel serial date format
[~, ~, raw, dates] = xlsread(workbookFile, sheetName, sprintf('A%d:L%d',startRow(1),endRow(1)),'' , @convertSpreadsheetExcelDates);
for block=2:length(startRow)
    [~, ~, tmpRawBlock,tmpDateNumBlock] = xlsread(workbookFile, sheetName, sprintf('A%d:L%d',startRow(block),endRow(block)),'' , @convertSpreadsheetExcelDates);
    raw = [raw;tmpRawBlock]; %#ok<AGROW>
    dates = [dates;tmpDateNumBlock]; %#ok<AGROW>
end
stringVectors = string(raw(:,[2,8,9,11,12]));
stringVectors(ismissing(stringVectors)) = '';
raw = raw(:,[1,4,5,6,7,10]);
dates = dates(:,3);

%% Create output variable
I = cellfun(@(x) ischar(x), raw);
raw(I) = {NaN};
data = reshape([raw{:}],size(raw));

%% Create table
tableout = table;

%% Allocate imported array to column variable names
tableout.ID = data(:,1);
tableout.Velfaerdsteknologi = stringVectors(:,1);
dates(~cellfun(@(x) isnumeric(x) || islogical(x), dates)) = {NaN};
tableout.Tidspunkt = datetime([dates{:,1}].', 'ConvertFrom', 'Excel');
tableout.Omsorgsfunktion = data(:,2);
tableout.Komfortfunktion = data(:,3);
tableout.Haevesaenkefunktion = data(:,4);
tableout.LunaMedCarendo = data(:,5);
tableout.Varighed = stringVectors(:,2);
tableout.VarighedTo = stringVectors(:,3);
tableout.VarighedEn = stringVectors(:,4);
tableout.VarighedNul = stringVectors(:,5);
tableout.Arbejdsgang = stringVectors(:,7);
tableout.Medarbejdere = data(:,6);
tableout.Tidmedborger = stringVectors(:,7); 
tableout.Superbruger = stringVectors(:,8);
tableout.Almindelig= stringVectors(:,9);
tableout.Afloser = stringVectors(:,10);

%Ændre fra string til datetime
tableout.Varighed  = datetime(tableout.Varighed(:),'InputFormat','mm.ss');
tableout.Varighed.Format = 'mm:ss';
tableout.Varighed  = cellstr(tableout.Varighed);

tableout.VarighedEn  = datetime(tableout.VarighedEn(:),'InputFormat','mm.ss');
tableout.VarighedEn.Format = 'mm:ss';
tableout.VarighedEn  = cellstr(tableout.VarighedEn);

tableout.VarighedTo  = datetime(tableout.VarighedTo(:),'InputFormat','mm.ss');
tableout.VarighedTo.Format = 'mm:ss';
tableout.VarighedTo  = cellstr(tableout.VarighedTo);

tableout.VarighedNul  = datetime(tableout.VarighedNul(:),'InputFormat','mm.ss');
tableout.VarighedNul.Format = 'mm:ss';
tableout.VarighedNul  = cellstr(tableout.VarighedNul);

tableout.Tidmedborger = datetime(tableout.Tidmedborger(:),'InputFormat','mm.ss');
tableout.Tidmedborger.Format = 'mm:ss';
tableout.Tidmedborger = cellstr(tableout.Tidmedborger);

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% tableout.Tidspunkt=datenum(tableout.Tidspunkt);
 
