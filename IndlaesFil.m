function tableout = IndlaesFil(workbookFile,sheetName,startRow,endRow)
%IMPORTFILE1 Import data from a spreadsheet
%   DATA = IMPORTFILE1(FILE) reads data from the first worksheet in the
%   Microsoft Excel spreadsheet file named FILE and returns the data as a
%   table.
%
%   DATA = IMPORTFILE1(FILE,SHEET) reads from the specified worksheet.
%
%   DATA = IMPORTFILE1(FILE,SHEET,STARTROW,ENDROW) reads from the specified
%   worksheet for the specified row interval(s). Specify STARTROW and
%   ENDROW as a pair of scalars or vectors of matching size for
%   dis-contiguous row intervals. To read to the end of the file specify an
%   ENDROW of inf.%
% Example:
%   SensorDataFil = importfile1('SensorDataFil.xlsx','Ark1',2,14);
%
%   See also XLSREAD.

% Auto-generated by MATLAB on 2018/10/31 19:53:07

%% Input handling

% If no sheet is specified, read first sheet
if nargin == 1 || isempty(sheetName)
    sheetName = 1;
end

% If row start and end points are not specified, define defaults
if nargin <= 3
    startRow = 2;
    endRow = 14;
end

%% Import the data, extracting spreadsheet dates in Excel serial date format
[~, ~, raw, dates] = xlsread(workbookFile, sheetName, sprintf('A%d:R%d',startRow(1),endRow(1)),'' , @convertSpreadsheetExcelDates);
for block=2:length(startRow)
    [~, ~, tmpRawBlock,tmpDateNumBlock] = xlsread(workbookFile, sheetName, sprintf('A%d:R%d',startRow(block),endRow(block)),'' , @convertSpreadsheetExcelDates);
    raw = [raw;tmpRawBlock]; %#ok<AGROW>
    dates = [dates;tmpDateNumBlock]; %#ok<AGROW>
end
stringVectors = string(raw(:,[2,12,14,18]));
stringVectors(ismissing(stringVectors)) = '';
raw = raw(:,[1,4,5,6,7,8,9,10,11,13,15,16,17]);
dates = dates(:,3);

%% Create output variable
I = cellfun(@(x) ischar(x), raw);
raw(I) = {NaN};
data = reshape([raw{:}],size(raw));

%% Create table
tableout = table;

%% Allocate imported array to column variable names
tableout.ID = data(:,1);
tableout.Velfaerdsteknologi = stringVectors(:,1);
dates(~cellfun(@(x) isnumeric(x) || islogical(x), dates)) = {NaN};
tableout.Tidspunkt = datetime([dates{:,1}].', 'ConvertFrom', 'Excel');
tableout.Omsorgsfunktion = data(:,2);
tableout.Komfortfunktion = data(:,3);
tableout.Haevesaenkefunktion = data(:,4);
tableout.AnvendelseaflunasammenmedCarendo = data(:,5);
tableout.Varighedforarbejdsgang = stringVectors(:,3);
tableout.Varighedm2medarbejdere = data(:,6);
tableout.Varighedm1medarbejder = data(:,8);
tableout.Varighedm0medarbejder = data(:,9);
tableout.Arbejdsgang = categorical(stringVectors(:,2));
tableout.Medarbejdere = data(:,10);
tableout.Tidmedborger = stringVectors(:,3);
tableout.Superbruger = data(:,11);
tableout.Almindeligtpersonale = data(:,12);
tableout.Aflser = data(:,13);
%tableout.Datastmedrdata = stringVectors(:,4);

d=1; 
% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% tableout.Tidspunkt=datenum(tableout.Tidspunkt);

